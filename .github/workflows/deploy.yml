name: Build and Deploy to Kubernetes

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - run: npm ci
      - run: npm run lint
      - run: echo "Skip test step for now"

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - run: npm ci
      - run: npm run build

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t faelsouz/dranapaula-web:latest .
          docker push faelsouz/dranapaula-web:latest

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
  
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
  
      - name: Instalar jq (sem root)
        run: |
          mkdir -p $HOME/bin
          curl -L -o $HOME/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          chmod +x $HOME/bin/jq
          echo "$HOME/bin" >> $GITHUB_PATH
  
      - name: Verificar última versão da imagem
        id: get_latest_image
        run: |
          IMAGE_TAG=$(curl -s "https://hub.docker.com/v2/repositories/faelsouz/dranapaula-web/tags/?page_size=1" | jq -r '.results[0].name')
          echo "Última versão da imagem: $IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
  
      - name: Garantir pelo menos 3 réplicas
        run: |
          CURRENT_REPLICAS=$(kubectl get deployment dranapaula-web -n est-web -o jsonpath='{.spec.replicas}')
          echo "Réplicas atuais: $CURRENT_REPLICAS"
          if [ "$CURRENT_REPLICAS" = "0" ]; then
            echo "Atualizando para 3 réplicas..."
            kubectl scale deployment dranapaula-web --replicas=3 -n est-web
          else
            echo "Quantidade de réplicas atual é suficiente. Não será alterada."
          fi
  
      - name: Verificar imagem atual no deployment
        id: get_current_image
        run: |
          CURRENT_IMAGE=$(kubectl get deployment dranapaula-web -n est-web -o=jsonpath='{.spec.template.spec.containers[0].image}')
          echo "Imagem atual: $CURRENT_IMAGE"
          if [[ "$CURRENT_IMAGE" == "faelsouz/dranapaula-web:${{ env.IMAGE_TAG }}" ]]; then
            echo "A imagem já está atualizada. Nenhuma ação necessária."
            exit 0
          fi
  
      - name: Atualizar imagem no Deployment
        run: |
          kubectl set image deployment/dranapaula-web \
            dranapaula-web=faelsouz/dranapaula-web:${{ env.IMAGE_TAG }} \
            -n est-web
  
      - name: Aguardar rollout do Deployment
        run: |
          if ! kubectl get deployment dranapaula-web -n est-web &> /dev/null; then
            echo "❌ Deployment 'dranapaula-web' não encontrado no namespace 'est-web'"
            exit 1
          fi
  
          echo "⏳ Aguardando o rollout do deployment 'dranapaula-web'..."
          kubectl rollout status deployment/dranapaula-web -n est-web
