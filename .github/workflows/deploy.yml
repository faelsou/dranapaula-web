name: Build and Deploy to Kubernetes

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - run: npm ci
      - run: npm run lint
      - run: echo "Skip test step for now"

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - run: npm ci
      - run: npm run build

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t faelsouz/dranapaula-web:latest .
          docker push faelsouz/dranapaula-web:latest

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Baixar jq binário
        run: |
          curl -L -o /usr/local/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          chmod +x /usr/local/bin/jq  

      - name: Verificar última versão da imagem
        id: get_latest_image
        run: |
          IMAGE_TAG=$(curl -s "https://hub.docker.com/v2/repositories/faelsouz/dranapaula-web/tags/" | grep -oP '"name": "\K([^"]+)' | head -n 1)
          echo "Última versão da imagem: $IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Garantir pelo menos 3 réplicas
        run: |
          CURRENT_REPLICAS=$(kubectl get deployment dranapaula-web -n est-web -o jsonpath='{.spec.replicas}')
          echo "Réplicas atuais: $CURRENT_REPLICAS"
          if [ "$CURRENT_REPLICAS" = "0" ]; then
            echo "Atualizando para 3 réplicas..."
            kubectl scale deployment dranapaula-web --replicas=3 -n est-web
          else
            echo "Quantidade de réplicas atual é suficiente. Não será alterada."
          fi

      - name: Atualizar imagem no Deployment
        run: |
          kubectl set image deployment/dranapaula-web \
            dranapaula-web=faelsouz/dranapaula-web:${{ env.IMAGE_TAG }} \
            -n est-web

      - name: Aguardar rollout do Deployment
        run: |
          kubectl rollout status deployment/dranapaula-web -n est-web

      - name: Verificar status dos pods (debug)
        run: kubectl get pods -n est-web

      - name: Port-forward para localhost:8080
        run: |
          kubectl port-forward svc/dranapaula-web-service 8080:80 -n est-web &
          sleep 5

      - name: Esperar app responder
        run: |
          APP_URL="http://localhost:8080"
          echo "Esperando a aplicação ficar disponível em $APP_URL..."
          for i in {1..10}; do
            if curl -s $APP_URL > /dev/null; then
              echo "Aplicação está online!"
              exit 0
            else
              echo "Tentando novamente..."
              sleep 5
            fi
          done
          echo "Aplicação não respondeu!"
          exit 1
