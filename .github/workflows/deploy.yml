
name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - run: npm ci
      - run: npm run lint
      - run: echo "Skip test step for now"

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - run: npm ci
      - run: npm run build
      
      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      
      - name: Build and push Docker image
        run: |
          docker build -t faelsouz/dranapaula-web:latest .
          docker push faelsouz/dranapaula-web:latest
      
  deploy:
    needs: build
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
#    - name: Configure Kubernetes config
#      run: |
#        mkdir -p $HOME/.kube/
#        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
#        chmod 600 $HOME/.kube/config
    - name: Configurar KUBECONFIG
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
    
    - name: Atualizar imagem no Deployment
      run: |
        kubectl set image deployment/dranapaula-web \
          dranapaula-web=faelsouz/dra-ana-paula:latest \
          -n est-web

    - name: Aguardar rollout do Deployment
      run: |
        kubectl rollout status deployment/draanapaula-web -n est-web
    - name: Verificar pods (debug)
      run: kubectl get pods -n est-app
    - name: Port-forward para localhost:8080
      run: |
        kubectl port-forward svc/estetica-app-service 8080:80 -n est-app &
        sleep 5

    - name: Esperar app responder
      run: |
        APP_URL="http://localhost:8080"
        echo "Esperando a aplicação ficar disponível em $APP_URL..."
        for i in {1..10}; do
          if curl -s $APP_URL > /dev/null; then
            echo "Aplicação está online!"
            exit 0
          else
            echo "Tentando novamente..."
            sleep 5
          fi
        done
        echo "Aplicação não respondeu!"
        exit 1